
First.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000060  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000b1  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000036d  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001f3  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002b5  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000143  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b0  00000000  00000000  00000d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "keyboard.h"
#include "led.h"


int main(void)
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
	SW_Conf();
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <SW_Conf>
  78:	c0 e0       	ldi	r28, 0x00	; 0
  7a:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int i = 0; i < 8; i++){
		LED_Conf(i);
  7c:	ce 01       	movw	r24, r28
  7e:	0e 94 a5 00 	call	0x14a	; 0x14a <LED_Conf>

int main(void)
{
	SW_Conf();
	
	for(int i = 0; i < 8; i++){
  82:	21 96       	adiw	r28, 0x01	; 1
  84:	c8 30       	cpi	r28, 0x08	; 8
  86:	d1 05       	cpc	r29, r1
  88:	c9 f7       	brne	.-14     	; 0x7c <main+0x10>
		LED_Conf(i);
	}
	
	PORTA = 0;
  8a:	1b ba       	out	0x1b, r1	; 27
    
    while (1) 
    {
		int temp = SW_Read();
  8c:	0e 94 93 00 	call	0x126	; 0x126 <SW_Read>
  90:	8c 01       	movw	r16, r24
  92:	c0 e0       	ldi	r28, 0x00	; 0
  94:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i = 0; i < 4; i++){
			if(temp & 1<<i){
  96:	c8 01       	movw	r24, r16
  98:	0c 2e       	mov	r0, r28
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <main+0x34>
  9c:	95 95       	asr	r25
  9e:	87 95       	ror	r24
  a0:	0a 94       	dec	r0
  a2:	e2 f7       	brpl	.-8      	; 0x9c <main+0x30>
  a4:	80 ff       	sbrs	r24, 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <main+0x44>
				LED_Set(i);
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 b0 00 	call	0x160	; 0x160 <LED_Set>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x4a>
			} else {
				LED_Clear(i);
  b0:	ce 01       	movw	r24, r28
  b2:	0e 94 bb 00 	call	0x176	; 0x176 <LED_Clear>
	PORTA = 0;
    
    while (1) 
    {
		int temp = SW_Read();
		for(int i = 0; i < 4; i++){
  b6:	21 96       	adiw	r28, 0x01	; 1
  b8:	c4 30       	cpi	r28, 0x04	; 4
  ba:	d1 05       	cpc	r29, r1
  bc:	61 f7       	brne	.-40     	; 0x96 <main+0x2a>
  be:	e6 cf       	rjmp	.-52     	; 0x8c <main+0x20>

000000c0 <SW_Conf>:
#include "keyboard.h"

void SW_Conf() {
	SW_DDR = 0xF0;
  c0:	80 ef       	ldi	r24, 0xF0	; 240
  c2:	87 bb       	out	0x17, r24	; 23
	SW_PORT = 0x0F;
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	88 bb       	out	0x18, r24	; 24
}
  c8:	08 95       	ret

000000ca <SW_GetKeyState>:
unsigned int SW_GetKeyState(unsigned int SW_number){
	int column = SW_number%4+4;
	int row = SW_number/4;
	int x;
	
	SW_PORT = ~(1<<column);
  ca:	9c 01       	movw	r18, r24
  cc:	23 70       	andi	r18, 0x03	; 3
  ce:	30 70       	andi	r19, 0x00	; 0
  d0:	2c 5f       	subi	r18, 0xFC	; 252
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	ba 01       	movw	r22, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <SW_GetKeyState+0x16>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <SW_GetKeyState+0x12>
  e4:	9b 01       	movw	r18, r22
  e6:	20 95       	com	r18
  e8:	28 bb       	out	0x18, r18	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	ea ef       	ldi	r30, 0xFA	; 250
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <SW_GetKeyState+0x24>
	
	_delay_ms(1);
	
	x = SW_PIN & 0x0F;
  f2:	26 b3       	in	r18, 0x16	; 22
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	30 70       	andi	r19, 0x00	; 0
  fe:	96 95       	lsr	r25
 100:	87 95       	ror	r24
 102:	96 95       	lsr	r25
 104:	87 95       	ror	r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <SW_GetKeyState+0x42>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	8a 95       	dec	r24
 10e:	e2 f7       	brpl	.-8      	; 0x108 <SW_GetKeyState+0x3e>
 110:	40 95       	com	r20
 112:	50 95       	com	r21
 114:	4f 70       	andi	r20, 0x0F	; 15
 116:	50 70       	andi	r21, 0x00	; 0
 118:	24 17       	cp	r18, r20
 11a:	35 07       	cpc	r19, r21
 11c:	11 f4       	brne	.+4      	; 0x122 <SW_GetKeyState+0x58>
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	70 e0       	ldi	r23, 0x00	; 0
		return 1;
	} else {
		return 0;
	}
	
}
 122:	cb 01       	movw	r24, r22
 124:	08 95       	ret

00000126 <SW_Read>:

unsigned int SW_Read(){
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		for(int i = 0; i < 16; i++){
			if(SW_GetKeyState(i)){
 12e:	ce 01       	movw	r24, r28
 130:	0e 94 65 00 	call	0xca	; 0xca <SW_GetKeyState>
 134:	89 2b       	or	r24, r25
 136:	21 f0       	breq	.+8      	; 0x140 <SW_Read+0x1a>
				return i;
			}
		}
	}
 138:	ce 01       	movw	r24, r28
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret
	
}

unsigned int SW_Read(){
	while(1){
		for(int i = 0; i < 16; i++){
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	c0 31       	cpi	r28, 0x10	; 16
 144:	d1 05       	cpc	r29, r1
 146:	9c f3       	brlt	.-26     	; 0x12e <SW_Read+0x8>
 148:	f0 cf       	rjmp	.-32     	; 0x12a <SW_Read+0x4>

0000014a <LED_Conf>:
#include "led.h"

void LED_Conf(unsigned int LED_number){
	LED_DDR |= 1<<LED_number;
 14a:	9a b3       	in	r25, 0x1a	; 26
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <LED_Conf+0xc>
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <LED_Conf+0x8>
 15a:	92 2b       	or	r25, r18
 15c:	9a bb       	out	0x1a, r25	; 26
}
 15e:	08 95       	ret

00000160 <LED_Set>:

void LED_Set(unsigned int LED_number) {
	LED_PORT |= 1<<LED_number;
 160:	9b b3       	in	r25, 0x1b	; 27
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <LED_Set+0xc>
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	8a 95       	dec	r24
 16e:	e2 f7       	brpl	.-8      	; 0x168 <LED_Set+0x8>
 170:	92 2b       	or	r25, r18
 172:	9b bb       	out	0x1b, r25	; 27
}
 174:	08 95       	ret

00000176 <LED_Clear>:

void LED_Clear(unsigned int LED_number) {
	LED_PORT &= ~(1<<LED_number);
 176:	9b b3       	in	r25, 0x1b	; 27
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <LED_Clear+0xc>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	8a 95       	dec	r24
 184:	e2 f7       	brpl	.-8      	; 0x17e <LED_Clear+0x8>
 186:	20 95       	com	r18
 188:	29 23       	and	r18, r25
 18a:	2b bb       	out	0x1b, r18	; 27
}
 18c:	08 95       	ret

0000018e <LED_Toggle>:

void LED_Toggle(unsigned int LED_number){
	LED_PORT ^= 1<<LED_number;
 18e:	9b b3       	in	r25, 0x1b	; 27
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <LED_Toggle+0xc>
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <LED_Toggle+0x8>
 19e:	92 27       	eor	r25, r18
 1a0:	9b bb       	out	0x1b, r25	; 27
}
 1a2:	08 95       	ret

000001a4 <LED_GetState>:

unsigned int LED_GetState(unsigned int LED_number){
	if(LED_PIN & (1<<LED_number)){
 1a4:	29 b3       	in	r18, 0x19	; 25
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <LED_GetState+0xa>
 1aa:	35 95       	asr	r19
 1ac:	27 95       	ror	r18
 1ae:	8a 95       	dec	r24
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <LED_GetState+0x6>
 1b2:	21 70       	andi	r18, 0x01	; 1
 1b4:	30 70       	andi	r19, 0x00	; 0
		return 1;
	} else {
		return 0;
	}
 1b6:	c9 01       	movw	r24, r18
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
